
set $jwt_claim_sub        "";

set $oidc_jwt_keyfile     /etc/nginx/my_idp_jwk.json;
set $oidc_authz_endpoint  "http://127.0.0.1/dex/auth";
set $oidc_token_endpoint  "http://127.0.0.1/dex/token";
set $oidc_client          "my-client-id";
set $oidc_client_secret   "my-client-secret";
set $oidc_token_type      "id_token"; # Session token (access_token or id_token)
set $oidc_hmac_key        "ChangeMe"; # This should be unique for every NGINX instance/cluster
set $oidc_scope		  "openid+profile+email";

location /_auth_request {
    internal;
    set $auth_token $cookie_auth_token;
    js_content authRequest;
}

location = /_jwks_uri {
    # This is where the JSON Web Key Set is fetched from the IdP and cached
    internal;
    proxy_cache jwk;
    proxy_pass $oidc_jwt_keyfile;

    # This configuration ignores all response headers that influence caching,
    # and instead sets a fixed validity period before the JWK is re-fetched.
    # See http://nginx.org/r/proxy_cache for all configuration options
    proxy_cache_valid 200 12h;
    proxy_cache_lock on;
    proxy_cache_use_stale error timeout updating;
    proxy_ignore_headers Cache-Control Expires Set-Cookie;
}

location @oidc_auth {
    add_header Set-Cookie "auth_nonce=$request_id; Path=/; HttpOnly;";  # Random value
    add_header Set-Cookie "auth_redir=$request_uri; Path=/; HttpOnly;"; # So we know where to come back to
    return 302 "$oidc_authz_endpoint?client_id=$oidc_client&redirect_uri=$scheme://$host:$server_port$redir_location&response_type=code&scope=$oidc_scope&state=njs-example&nonce=123456";
}

set $redir_location "/_codexch";
location = /_codexch {
    js_content oidcCodeExchange; # nginScript function to obtain JWT and issue cookie
    add_header Set-Cookie "auth_token=$auth_token; HttpOnly;";

    error_page 500 502 504 @oidc_error; 
}

location @oidc_error {
    # This location is called when oidcCodeExchange() returns an error
    default_type text/plain;
    return 500 "NGINX / OpenID Connect login failure\n";
}

location = /_token {
    # This location is called by oidcCodeExchange(). We use the proxy_ directives
    # to construct the OpenID Connect token request, as per:
    #  http://openid.net/specs/openid-connect-core-1_0.html#TokenRequest
    internal;
    gunzip   on; # Decompress if necessary

    proxy_set_header  Content-Type "application/x-www-form-urlencoded";
    proxy_method      POST;
    proxy_set_body    "grant_type=authorization_code&code=$arg_code&client_id=$oidc_client&client_secret=$oidc_client_secret&redirect_uri=$scheme://$host:$server_port$redir_location";
    proxy_pass        $oidc_token_endpoint;
    proxy_buffers     8 32k; # Increase buffers to hold a complete response
    proxy_buffer_size 128k;
    proxy_busy_buffers_size 128k;
}
